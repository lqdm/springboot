pipeline {
  agent {
    node {
      label 'maven'
    }
  }

  parameters {
      string(name:'TAG_NAME',defaultValue: 'latest',description:'')
  }

environment {
    DOCKER_CREDENTIAL_ID = 'dockerhub-id'
    GITHUB_CREDENTIAL_ID = 'github-id'
    KUBECONFIG_CREDENTIAL_ID = 'demo-kubeconfig'
    REGISTRY = 'docker.io'
    DOCKERHUB_NAMESPACE = 'luomengsun'
    GITHUB_ACCOUNT = 'lqdm'
    APP_NAME = 'springboot'
}

  stages {
    stage('拉代码') {
      steps {
        git(url: 'https://github.com/lqdm/springboot.git', credentialsId: 'github-id', branch: 'main', changelog: true, poll: false)
      }
    }
    stage('构建镜像') {
      steps {
        container ('maven') {
          sh 'docker build -f $dockerFile -t $imageName:$ImageTag ./src/'
          withCredentials([usernamePassword(passwordVariable : 'REGISTRY_PASSWORD' ,usernameVariable : 'REGISTRY_USERNAME' ,credentialsId : "$DOCKER_CREDENTIAL_ID" ,)]) {
            sh 'echo "$REGISTRY_PASSWORD" | docker login $REGISTRY -u "$REGISTRY_USERNAME" --password-stdin'
          }

        }

      }
    }

    stage('推送镜像') {
      steps {
        container ('maven') {
          sh 'docker tag $localFullImageName $remoteImage:latest '
          sh 'docker push $remoteImage:latest '
        }
      }
    }

    stage('deploy to dev') {
      when{
        branch 'develop'
      }
      steps {
        input(id: 'deploy-to-dev', message: 'deploy to dev?')
        kubernetesDeploy(configs: 'deploy/dev-ol/**', enableConfigSubstitution: true, kubeconfigId: "$KUBECONFIG_CREDENTIAL_ID")
      }
    }
  }
}